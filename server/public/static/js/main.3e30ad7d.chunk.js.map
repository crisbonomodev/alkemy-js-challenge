{"version":3,"sources":["types/types.js","helpers/fetch.js","actions/auth.js","hooks/useForm.js","components/auth/LoginScreen.js","actions/ui.js","components/auth/RegisterScreen.js","routers/AuthRouter.js","routers/PrivateRoute.js","routers/PublicRoute.js","actions/balance.js","actions/transaction.js","components/auth/components/Navbar.js","components/ui/AddNewFab.js","components/main/components/BalanceEntry.js","components/main/components/TransactionEntry.js","components/main/components/TransactionEntries.js","components/main/BalanceScreen.js","components/transaction/TransactionForm.js","components/main/components/TransactionModal.js","components/main/MainScreen.js","components/auth/components/WaitingComponent.js","routers/AppRouter.js","reducers/uiReducer.js","reducers/transactionReducer.js","reducers/balanceReducer.js","store/store.js","reducers/authReducer.js","App.js","index.js"],"names":["types","baseUrl","process","fetchWithoutToken","endpoint","data","method","url","fetch","headers","body","JSON","stringify","fetchWithToken","token","localStorage","getItem","login","user","type","payload","checkingFinish","logout","useForm","initialState","useState","values","setValues","reset","handleInputChange","target","name","value","LoginScreen","loading","useSelector","state","ui","dispatch","useDispatch","email","password","formValues","className","onSubmit","e","preventDefault","a","response","json","ok","setItem","Date","getTime","uid","id","Swal","fire","message","startLogin","placeholder","onChange","autoComplete","disabled","to","setError","err","RemoveError","uiOpenModal","uiCloseModal","RegisterScreen","msgError","firstName","lastName","password2","trim","length","validator","isEmail","startRegisterWithEmailPasswordName","AuthRouter","exact","path","component","PrivateRoute","isAuthenticated","Component","rest","props","PublicRoute","balanceLoaded","balance","balanceAddNewAmount","transaction","userId","amount","resp","newBalance","filter","balanceFinishUpdate","balanceDeleteMovement","balanceById","console","log","transactionAddNew","transactionsLoaded","transactions","transactionSetActive","transactionUpdate","transactionDelete","Navbar","auth","onClick","clear","AddNewFab","BalanceEntry","balanceData","map","balanceItem","TransactionEntry","category","date","concept","title","showCancelButton","confirmButtonText","denyButtonText","then","result","isConfirmed","transactionStartDelete","TransactionEntries","key","BalanceScreen","TransactionForm","activeTransaction","typeInputDisabled","isDate","isNumeric","previousBalance","oldAmount","newAmount","newBalanceAmount","createdAt","updatedAt","undefined","Number","parseFloat","balanceStartUpdate","newTransaction","transactionAddStartNew","htmlFor","TransactionModal","openModal","Modal","setAppElement","isOpen","onRequestClose","style","content","top","left","right","bottom","marginRight","transform","contentLabel","MainScreen","WaitingComponent","AppRouter","checking","useEffect","transactionsById","transactionStartLoading","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","reducers","combineReducers","action","store","createStore","applyMiddleware","thunk","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3e30ad7d.chunk.js","sourcesContent":["\r\n\r\nexport const types = {\r\n    //Login\r\n    authChecking: '[auth] Checking login state',\r\n    authCheckingFinish: '[auth] Finish checking login state',\r\n    authStartLogin: '[auth] Start login',\r\n    authLogin: '[auth] Login',\r\n    authStartRegister: '[auth] Start Register',\r\n    authStartTokenRenew: '[auth] Start Token Renew',\r\n    authLogout: '[auth] Logout',\r\n    //UI\r\n    uiSetError: '[UI] SetError',\r\n    uiRemoveError: '[UI] RemoveError',\r\n    uiStartLoading: '[UI] Start loading',\r\n    uiFinishLoading: '[UI] Finish loading',\r\n    uiOpenModal: '[UI] Open Modal',\r\n    uiCloseModal: '[UI] Close Modal',\r\n    //Transactions\r\n    transactionAddNew: '[Transaction] Add transaction',\r\n    transactionUpdate: '[Transaction] Update transaction',\r\n    transactionDelete: '[Transaction] Delete transaction',\r\n    transactionStartLoading: '[Transaction] Loading transactions',\r\n    transactionFinishLoading: '[Transaction] Transactions loaded',\r\n    transactionSetActive: '[Transaction] Set active transaction',\r\n    transactionLogoutCleanup: '[Transaction] Logout cleanup',\r\n    //Balance\r\n    balanceLoaded: '[Balance] Balance loaded',\r\n    balanceUpdateAmount: '[Balance] Update amount',\r\n    balanceFinishUpdate: '[Balance] FinishUpdate',\r\n    balanceLogoutCleanup: '[Balance] Logout cleanup'\r\n}\r\n","const baseUrl = process.env.REACT_APP_API_URL;\r\n\r\n\r\nconst fetchWithoutToken = (endpoint, data, method = 'GET') => {\r\n\r\n    const url = `${baseUrl}/${endpoint}`;\r\n\r\n    if (method === 'GET')\r\n    {\r\n        return fetch(url);\r\n    }\r\n    else\r\n    {\r\n        return fetch(url,{\r\n            method,\r\n            headers: {\r\n                'Content-type':'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        });\r\n    }\r\n}\r\n\r\nconst fetchWithToken = (endpoint, data, method = 'GET') => {\r\n\r\n    const url = `${baseUrl}/${endpoint}`;\r\n    const token = localStorage.getItem('token') || '';\r\n\r\n    if (method === 'GET')\r\n    {\r\n        return fetch(url, {\r\n            method,\r\n            headers:{\r\n                'Content-type':'application/json',\r\n                'x-access-token': token\r\n            },\r\n        });\r\n    }\r\n    else\r\n    {\r\n        return fetch(url,{\r\n            method,\r\n            headers: {\r\n                'Content-type':'application/json',\r\n                'x-access-token': token\r\n            },\r\n            body: JSON.stringify(data)\r\n        });\r\n    }\r\n}\r\n\r\nexport {\r\n    fetchWithoutToken,\r\n    fetchWithToken\r\n}","import { types } from \"../types/types\";\r\nimport { fetchWithoutToken,fetchWithToken } from \"../helpers/fetch\";\r\nimport Swal from 'sweetalert2';\r\n\r\n//Accion que realiza el login del usuario con email y password\r\nexport const startLogin = (email,password) => {\r\n    //Retorna un callback\r\n    return async (dispatch) => {\r\n        const response = await fetchWithoutToken('auth/signin', {email, password}, 'POST');\r\n        const body = await response.json();\r\n        if(body.ok)\r\n        {\r\n            localStorage.setItem('token',body.token);\r\n            localStorage.setItem('token-init-date',new Date().getTime());\r\n\r\n            dispatch(login({uid: body.id,\r\n            name: body.name},\r\n                ))\r\n        }else\r\n        {\r\n            Swal.fire('Error',body.message);\r\n        }\r\n\r\n}\r\n}\r\n\r\n\r\nexport const startRegisterWithEmailPasswordName = (email,password,firstName,lastName) => {\r\nreturn async (dispatch) => {\r\n    const response = await fetchWithoutToken('auth/signup',{email,password,firstName,lastName},'POST');\r\n    const body = await response.json();\r\n    if(body.ok)\r\n        {\r\n            localStorage.setItem('token',body.token);\r\n            localStorage.setItem('token-init-date',new Date().getTime());\r\n\r\n            dispatch(login({uid: body.id,\r\n            name: body.name},\r\n                ))\r\n        }else\r\n        {\r\n            Swal.fire('Error',body.message);\r\n        }\r\n}\r\n} \r\n\r\n\r\nexport const login = (user) => {\r\n    return{\r\n        type: types.authLogin,\r\n        payload: user\r\n    }\r\n}\r\n\r\nexport const startChecking = () => {\r\n    return async(dispatch) => {\r\n        const response = await fetchWithToken('auth/renew');\r\n    const body = await response.json();\r\n    if(body.ok)\r\n        {\r\n            localStorage.setItem('token',body.token);\r\n            localStorage.setItem('token-init-date',new Date().getTime());\r\n\r\n            dispatch(login({uid: body.id,\r\n            name: body.name},\r\n                ))\r\n        }else\r\n        {\r\n            dispatch(checkingFinish());\r\n        }\r\n    }\r\n}\r\n\r\nconst checkingFinish = () => ({type: types.authCheckingFinish});\r\n\r\nexport const startLogout = () => {\r\n\r\n    return async (dispatch) => {\r\n        localStorage.clear();\r\n        dispatch(logout());\r\n    }\r\n}\r\n\r\nexport const logout = () => ({\r\n    type: types.authLogout\r\n})","import {useState} from 'react';\r\n\r\nexport const useForm = (initialState = {}) => {\r\n\r\n\r\n    const [values, setValues] = useState(initialState);\r\n    //funcion para resetear valores al initialstate\r\n    const reset = () => {\r\n        setValues(initialState);\r\n    }\r\n\r\n    const handleInputChange = ({target}) => {\r\n        setValues({\r\n            ...values,\r\n            [target.name] : target.value\r\n        });\r\n    }\r\n    return [values, handleInputChange,reset];\r\n};\r\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom'\nimport { startLogin } from '../../actions/auth';\nimport { useForm } from '../../hooks/useForm';\n\nexport const LoginScreen = () => {\n\n    const {loading} = useSelector(state => state.ui);\n    //Hook que da acceso al dispatch de acciones\n    const dispatch = useDispatch();\n\n    const [formValues, handleInputChange] = useForm({\n        email: '',\n        password: ''\n    })\n\n    const {email,password} = formValues;\n\n    const handleLogin = (e) => {\n        e.preventDefault();\n        dispatch(startLogin(email,password));\n    }\n\n\n    return (\n        <>\n            <h3 className=\"auth__title\">Login</h3>\n\n            <form onSubmit={handleLogin}>\n\n                <input \n                    type=\"text\"\n                    placeholder=\"Email\"\n                    name=\"email\"\n                    value={email}\n                    onChange={handleInputChange}\n                    className=\"auth__input\"\n                    autoComplete=\"off\"\n                />\n\n                <input \n                    type=\"password\"\n                    placeholder=\"Password\"\n                    name=\"password\"\n                    value={password}\n                    onChange={handleInputChange}\n                    className=\"auth__input\"\n                />\n\n\n                <button\n                    type=\"submit\"\n                    className=\"btn btn-primary btn-block\"\n                    disabled={loading}\n                >\n                    Login\n                </button>\n\n                {/*\n                <div className=\"auth__social-networks\">\n                    <p>Login with social networks</p>\n\n                    <div \n                        className=\"google-btn\"\n                        onClick={handleGoogleLogin}\n                        disabled={loading}\n                    >\n                        <div className=\"google-icon-wrapper\">\n                            <img className=\"google-icon\" src=\"https://upload.wikimedia.org/wikipedia/commons/5/53/Google_%22G%22_Logo.svg\" alt=\"google button\" />\n                        </div>\n                        <p className=\"btn-text\">\n                            <b>Sign in with google</b>\n                        </p>\n                    </div>\n                </div>\n                */}   \n                <Link \n                    to=\"/auth/register\"\n                    className=\"link\"\n                >\n                    Create new account    \n                </Link>\n\n            </form>\n        </>\n    )\n}\n","//Acciones relacionadas con el User Interface.\r\nimport { types } from \"../types/types\";\r\n\r\n//Action para setear el error en el form.\r\nexport const setError = (err) => ({\r\n    type: types.uiSetError,\r\n    payload: err\r\n});\r\n\r\n//Action para quitar el error en el form.\r\nexport const RemoveError = () => ({\r\n    type: types.uiRemoveError,\r\n});\r\n\r\n//Accion para iniciar el loading y bloquear el boton.\r\nexport const startLoading = () => ({\r\ntype: types.uiStartLoading,\r\n});\r\n\r\n//Accion para finalizar el loading y desbloquear el boton.\r\nexport const finishLoading = () => ({\r\n    type: types.uiFinishLoading,\r\n    });\r\n\r\n//Accion para abrir/cerrar el modal\r\n\r\nexport const uiOpenModal = () => ({\r\n    type: types.uiOpenModal\r\n})\r\n\r\nexport const uiCloseModal = () => ({\r\n    type: types.uiCloseModal\r\n})","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { useForm } from '../../hooks/useForm';\nimport {useDispatch, useSelector} from 'react-redux';\nimport validator from 'validator';\nimport { RemoveError, setError } from '../../actions/ui';\nimport { startRegisterWithEmailPasswordName } from '../../actions/auth';\n\nexport const RegisterScreen = () => {\n\n        //Hook que da acceso al dispatch de acciones\n        const dispatch = useDispatch();\n        //Obtenemos una parte del state con useSelector, el cual nos traera una copia del state\n        const {msgError} = useSelector(state => state.ui);\n\n\n    const [formValues, handleInputChange] = useForm({\n        firstName:'',\n        lastName:'',\n        email:'',\n        password:'',\n        password2:''\n    });\n\n    const {firstName,lastName,email,password,password2} = formValues;\n \n    //Validacion\n const isFormValid = () => {\n        \n    if (firstName.trim().length === 0)\n    {\n        dispatch(setError('Invalid name'));\n        return false;\n    }else if (lastName.trim().length === 0)\n    {\n        dispatch(setError('Invalid name'));\n        return false;\n    } else if (!validator.isEmail(email)) \n    {\n        dispatch(setError('Email no valido'));\n        return false;\n    }\n    else if (password !== password2 || password.trim().length < 5) \n    {\n        dispatch(setError('Password no valido'));\n        return false;\n    }\n    dispatch(RemoveError());\n    return true;\n}\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if (isFormValid()) {\n            \n            dispatch(startRegisterWithEmailPasswordName(email,password,firstName,lastName));\n        }\n    }\n\n   \n\n    return (\n        <>\n            <h3 className=\"auth__title\">Register</h3>\n\n            <form onSubmit={handleSubmit}>\n\n                \n                {//Si el mensaje de error es distinto de null, lo muestra\n                    msgError &&\n                    <div className=\"auth__alert-error\">\n                    {msgError}\n                    </div>\n                }\n\n                <input \n                    type=\"text\"\n                    placeholder=\"First Name\"\n                    name=\"firstName\"\n                    value={firstName}\n                    onChange={handleInputChange}\n                    className=\"auth__input\"\n                    autoComplete=\"off\"\n                />\n\n<input \n                    type=\"text\"\n                    placeholder=\"Last Name\"\n                    name=\"lastName\"\n                    value={lastName}\n                    onChange={handleInputChange}\n                    className=\"auth__input\"\n                    autoComplete=\"off\"\n                />\n\n                <input \n                    type=\"text\"\n                    placeholder=\"Email\"\n                    name=\"email\"\n                    value={email}\n                    onChange={handleInputChange}\n                    className=\"auth__input\"\n                    autoComplete=\"off\"\n                />\n\n                <input \n                    type=\"password\"\n                    placeholder=\"Password\"\n                    name=\"password\"\n                    value={password}\n                    onChange={handleInputChange}\n                    className=\"auth__input\"\n                />\n\n                <input \n                    type=\"password\"\n                    placeholder=\"Confirm password\"\n                    name=\"password2\"\n                    value={password2}\n                    onChange={handleInputChange}\n                    className=\"auth__input\"\n                />\n\n\n                <button\n                    type=\"submit\"\n                    className=\"btn btn-primary btn-block mb-5\"\n                >\n                    Register\n                </button>\n\n               \n\n                <Link \n                    to=\"/auth/login\"\n                    className=\"link\"\n                >\n                    Already registered?\n                </Link>\n\n            </form>\n        </>\n    )\n}\n","import React from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\n\nimport { LoginScreen } from '../components/auth/LoginScreen';\nimport { RegisterScreen } from '../components/auth/RegisterScreen';\n\nexport const AuthRouter = () => {\n    return (\n        <div className=\"auth__main\">\n            <div className=\"auth__box-container\">\n                <Switch>\n                    <Route \n                        exact\n                        path=\"/auth/login\"\n                        component={ LoginScreen }\n                    />\n\n                    <Route \n                        exact\n                        path=\"/auth/register\"\n                        component={ RegisterScreen }\n                    />\n\n                    <Redirect to=\"/auth/login\" />\n\n\n                </Switch>\n            </div>\n\n        </div>\n    )\n}\n","import React from 'react';\r\nimport { Redirect, Route } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\n//COmponente para proteger rutas privadas\r\n\r\nexport const PrivateRoute = ({\r\n    isAuthenticated,\r\n    component: Component,\r\n    ...rest\r\n}) => {\r\n    return (\r\n        <Route {...rest} //The rest parameter allows us to pass an indefinite number of parameters to a function and access them in an array\r\n        component={(props)=> (\r\n            (isAuthenticated) //Si el usuario esta autenticado, devuelvo el componente en la ruta, sino un redirect a login\r\n            ? <Component {...props}/>\r\n            : <Redirect to=\"/auth/login\" />\r\n        )}\r\n        />\r\n    )\r\n}\r\n\r\n\r\nPrivateRoute.propTypes = {\r\n    isAuthenticated: PropTypes.bool.isRequired,\r\n    component: PropTypes.func.isRequired\r\n}","import React from 'react';\r\nimport { Redirect, Route } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\n//COmponente para marcar rutas publicas\r\n\r\nexport const PublicRoute = ({\r\n    isAuthenticated,\r\n    component: Component,\r\n    ...rest\r\n}) => {\r\n    return (\r\n        <Route {...rest} //The rest parameter allows us to pass an indefinite number of parameters to a function and access them in an array\r\n        component={(props)=> (\r\n            (!isAuthenticated) //Si el usuario esta autenticado, devuelvo el componente en la ruta, sino un redirect a login\r\n            ? <Component {...props}/>\r\n            : <Redirect to=\"/\" />\r\n        )}\r\n        />\r\n    )\r\n}\r\n\r\n\r\nPublicRoute.propTypes = {\r\n    isAuthenticated: PropTypes.bool.isRequired,\r\n    component: PropTypes.func.isRequired\r\n}","import { fetchWithToken } from \"../helpers/fetch\";\r\nimport { types } from \"../types/types\";\r\n\r\n\r\nexport const balanceStartLoading = (id) => {\r\n    return async (dispatch) => {\r\n\r\n        try {\r\n            const resp = await fetchWithToken('balance/','GET');\r\n            const data = await resp.json();\r\n            const balanceById = data.filter(balance => balance.userId === id);\r\n            dispatch(balanceLoaded(balanceById));\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}\r\n\r\nconst balanceLoaded = (balance) => {\r\n    return {\r\n        type: types.balanceLoaded,\r\n        payload: balance\r\n    }};\r\n\r\nexport const balanceAddNewAmount = (transaction) => {\r\n    return async (dispatch) => {\r\n    const {userId,amount,type} = transaction;\r\n    const resp = await fetchWithToken('balance/',{userId,amount,type},'PUT');\r\n            const data = await resp.json();\r\n            if (data.ok)\r\n            {\r\n                const resp = await fetchWithToken('balance/','GET');\r\n                const data = await resp.json();\r\n                const newBalance = data.filter(balance => balance.userId === userId);\r\n                dispatch(balanceFinishUpdate(newBalance));\r\n            }\r\n    \r\n    }\r\n}\r\n\r\n\r\nexport const balanceStartUpdate = (previousBalance,oldAmount,newAmount,type) => {\r\n   //console.log(previousBalance,oldAmount,newAmount);\r\n    return async (dispatch) => {\r\n        try { \r\n                let newBalanceAmount = 0;\r\n                let newBalance = previousBalance.map(balanceItem => {\r\n\r\n                    let {balance,userId,id,createdAt,updatedAt} = balanceItem;\r\n                    \r\n                if (oldAmount !== undefined && newAmount !== undefined)\r\n                {\r\n                    switch (type) {\r\n                        case 'ingreso':\r\n                            newBalanceAmount = balance - Number.parseFloat(oldAmount) + Number.parseFloat(newAmount);   \r\n                            break;\r\n                        case 'egreso':\r\n                            newBalanceAmount = balance + Number.parseFloat(oldAmount) - Number.parseFloat(newAmount);\r\n                            break;\r\n                            default:\r\n                            break;\r\n                    }\r\n                }\r\n\r\n                return {\r\n                    id,\r\n                    userId,\r\n                    balance : newBalanceAmount,\r\n                    createdAt,\r\n                    updatedAt,\r\n                };\r\n\r\n            })\r\n\r\n            const resp = await fetchWithToken('balance/',{newBalance},'POST');\r\n            const data = await resp.json();\r\n            if(data.ok)\r\n            {\r\n                dispatch(balanceFinishUpdate(newBalance));\r\n            }\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}\r\n\r\nexport const balanceDeleteMovement = (transaction) => {\r\n    return async (dispatch) => {\r\n        try {\r\n            \r\n            const {userId,amount,type} = transaction; \r\n            const resp = await fetchWithToken('balance/',{userId,amount,type},'DELETE');\r\n            const data = await resp.json();\r\n            if (data.ok)\r\n            {\r\n                const resp = await fetchWithToken('balance/','GET');\r\n                const data = await resp.json();\r\n                const balanceById = data.filter(balance => balance.userId === userId);\r\n                dispatch(balanceLoaded(balanceById));\r\n            }\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}\r\n\r\nexport const balanceFinishUpdate = (balance) => {\r\n    return {\r\n    type: types.balanceFinishUpdate,\r\n        payload: balance\r\n}\r\n}\r\n\r\nexport const balanceLogoutCleanup = () => ({\r\n    type: types.balanceLogoutCleanup\r\n})","\r\nimport { fetchWithToken } from \"../helpers/fetch\";\r\nimport { types } from \"../types/types\";\r\nimport { balanceAddNewAmount, balanceDeleteMovement} from \"./balance\";\r\n\r\nexport const transactionAddStartNew = (transaction) => {\r\n\r\n    return async  (dispatch) => {\r\n\r\n        try {\r\n            const resp = await fetchWithToken('transaction/',transaction,'POST');\r\n            const body = await resp.json();\r\n\r\n            if (body.ok)\r\n            {\r\n\r\n                transaction.id = body.newTransaction.id;\r\n                \r\n                dispatch(balanceAddNewAmount(transaction))\r\n                .then(dispatch(transactionAddNew(transaction)));\r\n                \r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n\r\n\r\n    }\r\n};\r\n\r\nexport const transactionAddNew = (transaction) => ({\r\n    type: types.transactionAddNew,\r\n    payload: transaction\r\n});\r\n\r\nexport const transactionStartLoading = (id) => {\r\n    return async (dispatch) => {\r\n\r\n        try {\r\n            const resp = await fetchWithToken('transaction/','GET');\r\n            const data = await resp.json();\r\n\r\n            const transactionsById = data.filter(transaction => transaction.userId === id);\r\n\r\n            dispatch(transactionsLoaded(transactionsById));\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}\r\n\r\nconst transactionsLoaded = (transactions) => ({\r\n        type: types.transactionFinishLoading,\r\n        payload: [...transactions]\r\n    });\r\n\r\nexport const transactionSetActive = (transaction) => ({\r\n    type: types.transactionSetActive,\r\n    payload: transaction\r\n\r\n})\r\n\r\nexport const transactionStartUpdate = (transaction,id) => {\r\n    return async (dispatch) => {\r\n        transaction.id = id;\r\n        const resp = await fetchWithToken('transaction/',transaction,'PUT');\r\n        const body = await resp.json();\r\n\r\n        if(body.ok)\r\n        {\r\n           dispatch(transactionUpdate(transaction));\r\n        }\r\n    }\r\n}\r\n\r\nexport const transactionUpdate = (transaction) => ({\r\n    type: types.transactionUpdate,\r\n    payload: transaction\r\n})\r\n\r\nexport const transactionStartDelete = (transaction) => {\r\n    return async (dispatch) => {\r\n        const {id} = transaction;\r\n        const resp = await fetchWithToken('transaction/',{id},'DELETE');\r\n        const body = await resp.json();\r\n\r\n        if(body.ok)\r\n        {\r\n            dispatch(balanceDeleteMovement(transaction));\r\n            dispatch(transactionDelete(id));\r\n        }\r\n    }\r\n}\r\n\r\nconst transactionDelete = (id) =>({\r\n    type: types.transactionDelete,\r\n    payload: id\r\n})\r\n\r\nexport const transactionLogoutCleanup = () => ({\r\n    type: types.transactionLogoutCleanup\r\n})","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { startLogout } from '../../../actions/auth'\r\nimport { balanceLogoutCleanup } from '../../../actions/balance'\r\nimport { transactionLogoutCleanup } from '../../../actions/transaction'\r\n\r\nexport const Navbar = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const {name} = useSelector(state => state.auth)\r\n\r\n    const handleLogout = () => {\r\n        dispatch(balanceLogoutCleanup());\r\n        dispatch(transactionLogoutCleanup());\r\n        dispatch(startLogout());\r\n    }\r\n    return (\r\n        <div className=\"navbar navbar-dark bg-dark mb-4\">\r\n            <div className=\"navbar-brand\">\r\n                Welcome, {name}\r\n\r\n            </div>\r\n            <button className=\"btn-logout \" onClick={handleLogout}>\r\n                <i className=\"fas fa-sign-out-alt\"></i>\r\n                <span>Logout</span>\r\n            </button>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useDispatch } from 'react-redux';\r\nimport { uiOpenModal } from '../../actions/ui';\r\n\r\nexport const AddNewFab = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    \r\n    const handleClickNew = () => {\r\n        dispatch(uiOpenModal());\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <button className=\"btn btn-circle fab\" onClick={handleClickNew}>\r\n                <i className=\"fas fa-plus\">+</i>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport const BalanceEntry = () => {\r\n\r\n    const {balance: balanceData} = useSelector(state => state.balance)\r\n    let balance =0;\r\n\r\n        if(balanceData !== [])\r\n        {\r\n            balanceData.map(balanceItem => balance = balanceItem.balance);\r\n        }\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row justify-content-md-center\">\r\n                    <div className=\"col\">\r\n                        <h1>Balance: $ {balance} </h1>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n};\r\n","import React from 'react'\r\nimport { useDispatch } from 'react-redux';\r\nimport { transactionSetActive, transactionStartDelete } from '../../../actions/transaction';\r\nimport { uiOpenModal } from '../../../actions/ui';\r\nimport Swal from 'sweetalert2';\r\n\r\nexport const TransactionEntry = (transaction) => {\r\n    const {type, category,date,concept,amount} = transaction;\r\n\r\n    const dispatch = useDispatch();\r\n    \r\n    const handleEdit = () => {\r\n        dispatch(transactionSetActive(transaction));\r\n        dispatch(uiOpenModal());\r\n    }\r\n\r\n    const handleDelete =() => {\r\n        Swal.fire({\r\n            title: 'Do you want to delete the transaction?',\r\n            showCancelButton: true,\r\n            confirmButtonText: `Delete`,\r\n            denyButtonText: `Cancel`,\r\n          }).then((result) => {\r\n            /* Read more about isConfirmed, isDenied below */\r\n            if (result.isConfirmed) {\r\n                dispatch(transactionStartDelete(transaction))\r\n            }\r\n          })\r\n    }\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col-sm\">\r\n            <span>{type}</span>\r\n            </div>\r\n            <div className=\"col-sm\">\r\n            <span>{category}</span>\r\n            </div>\r\n            <div className=\"col-sm\">\r\n            <span>{date}</span>\r\n            </div>\r\n            <div className=\"col-sm\">\r\n            <span>{concept}</span>\r\n            </div>\r\n            <div className=\"col-sm\">\r\n            <span>{amount}</span>\r\n            </div>\r\n            <div className=\"col-sm\">\r\n            <button type=\"button\" className=\"btn btn-primary \" onClick={handleEdit}>Edit</button>\r\n            </div>\r\n            <div className=\"col-sm\">\r\n            <button type=\"button\" className=\"btn btn-danger\" onClick={handleDelete}>Delete</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { TransactionEntry } from './TransactionEntry';\r\n\r\nexport const TransactionEntries = () => {\r\n\r\n    const {transactions} = useSelector(state => state.transaction);\r\n\r\n    if(transactions)\r\n    {\r\n        return (\r\n            <div className=\"container\">\r\n                {\r\n                    transactions.map(transaction => (\r\n                        <TransactionEntry key={transaction.id} \r\n                        {...transaction} />\r\n                    ))\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n    else\r\n    {\r\n        return(\r\n            <div>\r\n                <h1>No hay transacciones</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { AddNewFab } from '../ui/AddNewFab';\r\nimport { BalanceEntry } from './components/BalanceEntry';\r\nimport { TransactionEntries } from './components/TransactionEntries';\r\n\r\nexport const BalanceScreen = () => {\r\n\r\n    return (\r\n        <div>\r\n            <BalanceEntry/>\r\n            <div className=\"container-md container-style\">\r\n            <TransactionEntries />\r\n            <AddNewFab />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { transactionAddStartNew, transactionStartUpdate } from '../../actions/transaction';\r\nimport { useForm } from '../../hooks/useForm';\r\nimport {uiCloseModal} from '../../actions/ui';\r\nimport { balanceStartUpdate } from '../../actions/balance';\r\nimport validator from 'validator';\r\nimport { RemoveError, setError } from '../../actions/ui';\r\n\r\nexport const TransactionForm = () => {\r\n\r\n\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const {activeTransaction} = useSelector(state => state.transaction);\r\n\r\n    const {msgError} = useSelector(state => state.ui);\r\n\r\n    const {uid: userId} = useSelector(state => state.auth);\r\n\r\n    const {balance} = useSelector(state => state.balance)\r\n\r\n    const [formValues, handleInputChange] = useForm(activeTransaction || {\r\n        concept: '',\r\n        amount: '',\r\n        type: 'ingreso',\r\n        category: '',\r\n        date: ''\r\n    });\r\n\r\n    const {concept, amount, date, type, category} = formValues;\r\n\r\n    const isFormValid = () => {\r\n        \r\n        if (concept.trim().length === 0)\r\n        {\r\n            dispatch(setError('Invalid concept'));\r\n            return false;\r\n        }else if (!validator.isDate(date))\r\n        {\r\n            dispatch(setError('Invalid date'));\r\n            return false;\r\n        } else if (!validator.isNumeric(amount)) \r\n        {\r\n            dispatch(setError('Invalid amount'));\r\n            return false;\r\n        }\r\n        else if (category.trim().length === 0) \r\n        {\r\n            dispatch(setError('Invalid category'));\r\n            return false;\r\n        }\r\n        else if (type.trim().length === 0) \r\n        {\r\n            dispatch(setError('Invalid type'));\r\n            return false;\r\n        }\r\n        dispatch(RemoveError());\r\n        return true;\r\n    }\r\n  \r\n    \r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if(isFormValid())\r\n        {\r\n            if(activeTransaction)\r\n            {\r\n                dispatch(transactionStartUpdate(formValues,activeTransaction.id));\r\n                dispatch(balanceStartUpdate(balance,activeTransaction.amount,amount,type));  \r\n            }\r\n            else\r\n            {\r\n                dispatch(transactionAddStartNew({userId,...formValues}));\r\n            }\r\n            dispatch(uiCloseModal());\r\n        }\r\n\r\n\r\n    }\r\n\r\n    let title = 'New Transaction';\r\n    let typeInputDisabled = false;\r\n\r\n    if(activeTransaction)\r\n    {\r\n        title = 'Edit Transaction';\r\n        typeInputDisabled = true;\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h3>{title}</h3>\r\n            <form onSubmit={handleSubmit}>\r\n                {//Si el mensaje de error es distinto de null, lo muestra\r\n                    msgError &&\r\n                    <div className=\"auth__alert-error\">\r\n                    {msgError}\r\n                    </div>\r\n                }\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm\">\r\n                        <label className=\"form-label\" htmlFor=\"type\">Tipo: </label>\r\n                        <select className=\"form-control\" name=\"type\" disabled={typeInputDisabled} value={type} onChange={handleInputChange} id=\"\">\r\n                            <option value=\"ingreso\">Ingreso</option>\r\n                            <option value=\"egreso\">Egreso</option>\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"col-sm\">\r\n                        <label className=\"form-label\" htmlFor=\"category\">Categoria: </label>\r\n                        <select name=\"category\"  className=\"form-control\" value={category} onChange={handleInputChange}>\r\n                            <option>Sueldo</option>\r\n                            <option>Inversiones</option>\r\n                            <option>Ventas</option>\r\n                            <option>Alimentacion</option>\r\n                            <option>Educación</option>\r\n                            <option>Impuestos</option>\r\n                            <option>Repuestos</option>\r\n                            <option>Ropa</option>\r\n                            <option>Salud</option>\r\n                            <option>Ocio</option>\r\n                            <option>Otros</option>\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"col-sm\">\r\n                        <label className=\"form-label\" htmlFor=\"date\">Fecha: </label>\r\n                        <input type=\"date\" className=\"form-control\" value={date} name=\"date\" onChange={handleInputChange} id=\"\"/>\r\n                    </div>\r\n                </div>\r\n                <label className=\"form-label\" htmlFor=\"concept\">Concepto: </label>\r\n                <input type=\"text\" className=\"form-control\" name=\"concept\" value={concept} onChange={handleInputChange} id=\"\"/>\r\n                <label className=\"form-label\" htmlFor=\"amount\">Monto: </label>\r\n                <input type=\"text\" className=\"form-control\" name=\"amount\" value ={amount} onChange={handleInputChange} id=\"\"/>\r\n                <button type=\"submit\" className=\"btn btn-primary mt-3\">Save</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport Modal from 'react-modal';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { transactionSetActive } from '../../../actions/transaction';\r\nimport { uiCloseModal } from '../../../actions/ui';\r\nimport { TransactionForm } from '../../transaction/TransactionForm';\r\n\r\nexport const TransactionModal = () => {\r\n\r\n\r\n    const {openModal} = useSelector(state => state.ui);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const customStyles = {\r\n        content : {\r\n          top                   : '50%',\r\n          left                  : '50%',\r\n          right                 : 'auto',\r\n          bottom                : 'auto',\r\n          marginRight           : '-50%',\r\n          transform             : 'translate(-50%, -50%)'\r\n        }\r\n      };\r\n\r\n      Modal.setAppElement('#root');\r\n\r\n      const closeModal = () => {\r\n          dispatch(transactionSetActive(null));\r\n          dispatch(uiCloseModal());\r\n      }\r\n\r\n    return (\r\n        <div>\r\n           <Modal\r\n            isOpen={openModal}\r\n            //onAfterOpen={afterOpenModal}\r\n            onRequestClose={closeModal}\r\n            style={customStyles}\r\n            contentLabel=\"Example Modal\"\r\n            >\r\n            <TransactionForm />\r\n            </Modal>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { Navbar } from '../auth/components/Navbar';\r\nimport { BalanceScreen } from './BalanceScreen';\r\nimport { TransactionModal } from './components/TransactionModal';\r\n\r\nexport const MainScreen = () => {\r\n    return (\r\n        <div>\r\n            <Navbar />\r\n            <BalanceScreen />\r\n            <TransactionModal />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nexport const WaitingComponent = () => {\r\n    return (\r\n        \r\n        <div className=\"auth__box-container\">\r\n            <div className=\"auth__main\">\r\n                <h1 className=\"auth__title\">Cargando...</h1>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Redirect\n  } from 'react-router-dom';\nimport { AuthRouter } from './AuthRouter';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {PrivateRoute} from './PrivateRoute';\nimport {PublicRoute} from './PublicRoute';\nimport { MainScreen } from '../components/main/MainScreen';\nimport { startChecking } from '../actions/auth';\nimport { useEffect } from 'react';\nimport { WaitingComponent } from '../components/auth/components/WaitingComponent';\nimport { transactionStartLoading } from '../actions/transaction';\nimport { balanceStartLoading } from '../actions/balance';\n\nexport const AppRouter = () => {\n\n    const dispatch = useDispatch();\n    const {checking,uid} = useSelector(state => state.auth);\n\n    useEffect(() => {\n        dispatch(startChecking());\n    }, [dispatch])\n\n\n    if(uid !== undefined && !checking)\n    {\n        dispatch(balanceStartLoading(uid))\n        .then(dispatch( transactionStartLoading(uid)));\n        \n    }\n\n    if (checking)\n    {\n        return (<WaitingComponent />);\n    }\n\n    return (\n        <Router>\n            <div>\n                <Switch>\n\n                <PublicRoute path=\"/auth\"\n                isAuthenticated={!!uid}\n                component={ AuthRouter} />\n\n                <PrivateRoute path=\"/\"\n                isAuthenticated={!!uid}\n                component={MainScreen} />\n\n\n                <Redirect to=\"/auth/login\" />\n                </Switch>\n            </div>\n        </Router>\n    )\n}\n","import { types } from \"../types/types\";\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    msgError: null,\r\n    openModal: false,\r\n};\r\n\r\nexport const uiReducer = (state = initialState,action) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case types.uiSetError:\r\n            return {\r\n                ...state,\r\n                msgError: action.payload\r\n            };\r\n            case types.uiRemoveError:\r\n            return {\r\n                ...state,\r\n                msgError: null\r\n            };\r\n        case types.uiStartLoading:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n             };\r\n             case types.uiFinishLoading:\r\n                return {\r\n                    ...state,\r\n                    loading: false,\r\n                 }\r\n            case types.uiOpenModal:\r\n                return {\r\n                    ...state,\r\n                    openModal: true\r\n                }\r\n            case types.uiCloseModal:\r\n                return {\r\n                    ...state,\r\n                    openModal: false\r\n                }\r\n        default:\r\n            return state;\r\n    }\r\n\r\n\r\n}","import { types } from '../types/types';\r\n\r\nconst initialState = {\r\n    transactions: [],\r\n    activeTransaction: null\r\n}\r\n\r\nexport const transactionReducer = (state=initialState,action) => {\r\n    switch (action.type) {\r\n        case types.transactionAddNew:\r\n            return {\r\n                ...state,\r\n                transactions: [\r\n                    ...state.transactions,\r\n                    action.payload\r\n                ],\r\n                activeTransaction: null\r\n            }\r\n        case types.transactionFinishLoading:\r\n            return {\r\n                ...state,\r\n                transactions: [...action.payload],\r\n                activeTransaction: null\r\n            }\r\n        case types.transactionSetActive:\r\n            return {\r\n                ...state,\r\n                activeTransaction: action.payload\r\n            }\r\n        case types.transactionUpdate:\r\n            return {\r\n                ...state,\r\n                transactions: state.transactions.map(\r\n                    transaction => transaction.id === action.payload.id ? action.payload : transaction),\r\n                    activeTransaction: null\r\n            }\r\n        case types.transactionDelete:\r\n            return {\r\n                ...state,\r\n                transactions: state.transactions.filter(transaction => transaction.id !== action.payload),\r\n                activeTransaction: null\r\n            }\r\n            \r\n        case types.transactionLogoutCleanup:\r\n                return { }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { types } from '../types/types';\r\n\r\nconst initialState = {\r\n    balance: []\r\n}\r\n\r\nexport const balanceReducer = (state = initialState,action) => {\r\n   switch (action.type) {\r\n       case types.balanceLoaded:\r\n           return {\r\n               ...state,\r\n               balance: [...action.payload]\r\n           }\r\n\r\n       case types.balanceFinishUpdate:\r\n           return{\r\n               ...state,\r\n               balance: [...action.payload]}\r\n\r\n        case types.balanceLogoutCleanup:\r\n            return {balance: []}\r\n       default:\r\n          return state;\r\n   }\r\n}\r\n","import {createStore, combineReducers, applyMiddleware, compose} from 'redux';\r\nimport { authReducer } from '../reducers/authReducer';\r\nimport { uiReducer } from '../reducers/uiReducer';\r\nimport thunk from 'redux-thunk';\r\nimport { transactionReducer } from '../reducers/transactionReducer';\r\nimport { balanceReducer } from '../reducers/balanceReducer';\r\n\r\nconst composeEnhancers = (typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\r\n\r\n//Combinacion de los reducers a utilizar\r\nconst reducers = combineReducers({\r\n    auth: authReducer,\r\n    ui: uiReducer,\r\n    transaction: transactionReducer,\r\n    balance: balanceReducer\r\n});\r\n\r\n//El createStore solo puede recibir un reducer, por lo que vamos a pasarle el reducer combinado\r\nexport const store = createStore(\r\n    reducers,\r\n    composeEnhancers(applyMiddleware(thunk)))","\r\n\r\nimport { types } from '../types/types';\r\n\r\nexport const authReducer = (state={},action) => {\r\n   switch (action.type) {\r\n       case types.authLogin:\r\n           return {\r\n               ...state,\r\n               checking:false,\r\n               ...action.payload\r\n           }\r\n\r\n        case types.authCheckingFinish:\r\n            return {\r\n                ...state,\r\n                checking: false\r\n            }\r\n        \r\n        case types.authLogout:\r\n        return {checking: false}\r\n\r\n       default:\r\n           return state;\r\n   }\r\n}\r\n","import React from 'react';\r\nimport {Provider} from 'react-redux';\r\nimport { AppRouter } from './routers/AppRouter';\r\nimport { store } from './store/store';\r\n\r\nexport const App = () => {\r\n    return (\r\n        <Provider store={store}>\r\n            <AppRouter />\r\n        </Provider>\r\n        \r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from './App';\nimport './styles/styles.scss'\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}